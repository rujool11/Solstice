use vite to create react app, npm create vite@latest

IMP: this is only for create-react-app, not vite 
to connect frontend ( port 5173 ) to backend ( port 5000 )
add proxy : http://127.0.0.1:5000 to package.json of frontend

for vite, => 
in viteconfig, add 
 server: {
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:5000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, 'api')
      }
    }
 }

for client side routing, use react-router-dom
wrap main app in BrowserRouter


IMP-->
in App.jsx, routing for / and /chats, -> if exact not used, then homePage and chatPage
both will be rendered, since /chats includes / route, thus we use exact in route for /

install axios to make api calls to backend (in App.jsx)
need to use async to use await, thus make it an async function

useEffect hook, which runs when the component has been rendered for the first time
used to perform side effects in function components
takes args useEffect(xFunction, dependencyArray)
xFunction is the function that will run and perform the side effect
dependencyArray is array of dependencies that determine when the xFunction should be re-executed
xFunction only re-executed when one of the values in the array changes between renders
empty dependencyArray => only runs after initial render
no dependencyArray => runs after every render


useState hook, returns a state variable and setState function to update the state
takes initial state as input, which can also be a function that calculates state, as well
as a variable/object

chakraUI -> Box works the same as div

postDetails -> changed to e.target.values[0], as it will then accept only the first 
file in cause of multiple files posted


useHistory() ->
(read more about this later) -->
used for conditional routing
hook in react router dom, gives you access to the history instance
can be used to navigate to different routes in application, and back and forth in history stack
in Signup and login, used to redirect to /chats after successful registration


postDetails ->  image upload processing, set startLoading true to show loading on 
submit button. if no image selected and this is called, will show toast with warning 
message. 
Check pic type (jpeg, png) , and create new FormData to upload to cloudinary
to data, append file pic, and cloudinary upload preset and cloud name
then, use fetch API upload image to cloudinary, by specifying url, and config with 
method (post) and data. 
.then(res => res.json()) parses the API response as json, so that it can be used further
.then(data => {...}) processes the parsed json data, and uses setPicture to set 
the picture state to url of cloudinary image, (data.url.toString()), setLoading to false
have a catch error block in case wrong format image uploaded. 
(common fetch API practises)
https://www.youtube.com/watch?v=cuEtnrL9-H0&t=3s


submitHandler ->  set loading as true, check if everything required is filled, 
if not, show toast with error/warning
check if passwords match, show error toast if not
try submitting, catch error and show toast
set config headers, Content-Type as 'application/json', which denotes that body 
contains json data. send data using axios.post, to out api endpoint /api/user, with 
data and config.
Object Literal: {name, email, password, pic: picture || undefined} -> shorthand for 
{name: namme, email:email, etc..}. pic : picture || undefined sets pic to picture if 
defined, else will set to undefined, (default will be used in cause of undefined)
Successful toast is shown in case of success
data is stored in localStorage under key userInfo, loading set to false to stop 
button loading, and user redirected to /chats page


updated homePage structure ->

Box of height and width 100vh and 100vw each contains a Grid of 2 columns (2, 1fr)
GridItems for branding part at left and login/signup forms at right, griditems have display
flex and are and aligned and justified at center to correctly center all elements inside it 
branding has a Stack of Text, with the name WeChat followed by Real Time Chat App in correct
size and boldness, forms side has a box which contains tabs, which displays Login and Signup 
components, depending on the tab clicked

context, and the useContext hook -> 
essentially, an easy way to pass state variables to compoments without passing them manually
useContext hook allows to consume context in functional compoments

/context/ChatProvider.js ->

ChatProvider wraps around the entire App to give compoments access to user and useState
basically, any compoment inside the app can use and update these state variables (user and   
setUser provided as of now). 
useEffect runs when history object changes ( to account for history changed by router), and 
fetches the user from localStorage, if user does not exist (not logged in), redirected to 
home page (and similarly redirected to chats page from home page if logged in by analogous
useEffect call).  
ChatState is a helper function that allows other compoments to easily access context value. 
{ children } prop represents whatever JSX compoments you wrap inside <ChatProvider>, so in this
case the whole App. When we use { children } in the return statement, we are essentially 
wrapping ChatContext.Provider around the { children }, so they can get access to the context 
provided by it. 

useNavigate instead of useHistory in react-router-dom v6 onwards, but this is v5.3.4

renamed to Solstice, changed git url, check 

{user && <X/>} means that if user is truthy, X will be rendered, and not rendered if user falsy